# -*- coding: utf-8 -*-
# {{ copyright }}
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
"""
The module file for {{ module_name }}
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type

from ansible.plugins.action import ActionBase
from ansible.errors import AnsibleActionFail
from ansible.module_utils.connection import Connection

from ansible_collections.ansible.netcommon.plugins.module_utils.network.common import (
    utils,
)
from ansible_collections.{{ collection_org }}.{{ collection_name }}.plugins.module_utils.{{ collection_name }} import (
    FortiOSRequest,
    map_obj_to_params,
    map_params_to_obj,
    check_payload_diff
)
from ansible_collections.ansible.utils.plugins.module_utils.common.argspec_validate import (
    AnsibleArgSpecValidator,
)
from ansible_collections.{{ collection_org }}.{{ collection_name }}.plugins.modules.{{ module_name }} import (
    DOCUMENTATION,
)


class ActionModule(ActionBase):
    """ action module
    """

    def __init__(self, *args, **kwargs):
        super(ActionModule, self).__init__(*args, **kwargs)
        self._result = None
        self.api_object = "{{ api_object_path }}"
        self.api_return = "{{ resource }}"
        self.module_return = "{{ resource }}"
        self.mkey = "{{ unique_key }}"
        self.key_transform = {{ module_params_dict }}

    def _check_argspec(self):
        aav = AnsibleArgSpecValidator(
            data=self._task.args,
            schema=DOCUMENTATION,
            schema_format="doc",
            name=self._task.action,
        )
        valid, errors, self._task.args = aav.validate()
        if not valid:
            self._result["failed"] = True
            self._result["msg"] = errors

    def _check_for_response_code(self, response_code, response):
        if response_code >= 400 and response_code != 404:
            if response.get("status") == "error":
                raise AnsibleActionFail(
                    "Request failed with HTTPerror code: {0}, and with a response: {1}".format(
                        response_code, response
                    )
                )
            elif response.get("message"):
                raise AnsibleActionFail(
                    "Request failed with HTTPerror code: {0}, and with a response: {1}".format(
                        response_code, response["message"]
                    )
                )

    def search_for_existing_rules(self, conn_request, resource_id, task_vars, data=None):
        code, resource_response = conn_request.get(
            self.api_object, mkey=resource_id, data=data, task_vars=task_vars
        )
        self._check_for_response_code(code, resource_response)
        return resource_response

    def search_for_resource_by_unique_key(self, conn_request, search_resource_by_key, task_vars):
        search_result = []
        if isinstance(search_resource_by_key, list):
            for each in search_resource_by_key:
                each_response = self.search_for_existing_rules(conn_request, each[self.mkey], task_vars)
                if each_response.get('http_status') == 404:
                    continue
                each_results = map_obj_to_params(each_response['results'][0], self.key_transform, self.api_return)
                each_results = utils.remove_empties(each_results)
                each_response['results'][0] = each_results
                search_result.append(each_response["results"][0])
        else:
            search_result = self.search_for_existing_rules(
                conn_request, search_resource_by_key, task_vars
            )
            if search_result.get('http_status') == 404:
                return list()
            each_results = map_obj_to_params(search_result['results'][0], self.key_transform, self.api_return)
            each_results = utils.remove_empties(each_results)
            search_result['results'][0] = each_results

        return search_result

    def delete_module_api_config(self, conn_request, module_config_params, task_vars):
        config = {}
        before = []
        after = []
        changed = False
        for each in module_config_params:
            each = utils.remove_empties(each)
            each_response = self.search_for_resource_by_unique_key(conn_request, each[self.mkey], task_vars)
            if not each_response:
                continue
            before.append(each_response["results"][0])
            code, resource_response = conn_request.delete(
                self.api_object+"/{0}".format(each[self.mkey]), data=None, task_vars=task_vars)
            if resource_response.get('http_status') == 200 and resource_response.get('revision_changed') == True:
                changed = True
        if changed:
            config.update({"before": before, "after": after})
        else:
            config.update({"before": before})
        return config, changed

    def configure_module_api(self, conn_request, module_config_params, task_vars):
        config = {}
        before = []
        after = []
        changed = False
        for each in module_config_params:
            each = utils.remove_empties(each)
            payload = map_params_to_obj(each, self.key_transform)
            each_response = self.search_for_resource_by_unique_key(conn_request, each[self.mkey], task_vars)
            if self._task.args["state"] == "merged":
                if not each_response:
                    code, resource_response = conn_request.post(self.api_object, data=payload, task_vars=task_vars)
                    if resource_response.get('revision_changed'):
                        changed = True
                        each_response = self.search_for_resource_by_unique_key(conn_request, each[self.mkey], task_vars)
                        after.append(each_response["results"][0])
                else:
                    before.append(each_response["results"][0])
                    code, resource_response = conn_request.put(
                        self.api_object+"/{0}".format(each[self.mkey]), data=payload, task_vars=task_vars)
                    if resource_response.get('revision_changed'):
                        changed = True
                        each_response = self.search_for_resource_by_unique_key(conn_request, each[self.mkey], task_vars)
                        after.append(each_response["results"][0])
            if self._task.args["state"] == "replaced":
                if not each_response:
                    code, resource_response = conn_request.post(self.api_object, data=payload, task_vars=task_vars)
                    if resource_response.get('revision_changed'):
                        each_response = self.search_for_resource_by_unique_key(conn_request, each[self.mkey], task_vars)
                        after.append(each_response["results"][0])
                        changed = True
                else:
                    if check_payload_diff(payload, each_response["results"][0]):
                        code, resource_response = conn_request.delete(
                            self.api_object+"/{0}".format(each[self.mkey]), data=None, task_vars=task_vars)
                        if resource_response.get('revision_changed'):
                            before.append(each_response["results"][0])
                            code, resource_response = conn_request.post(self.api_object, data=payload, task_vars=task_vars)
                            if resource_response.get('revision_changed'):
                                each_response = self.search_for_resource_by_unique_key(conn_request, each[self.mkey], task_vars)
                                after.append(each_response["results"][0])
                                changed = True
        if not changed:
            after = []
        config.update({"before": before, "after": after})

        return config, changed

    def run(self, tmp=None, task_vars=None):
        self._supports_check_mode = True
        self._result = super(ActionModule, self).run(tmp, task_vars)
        self._check_argspec()
        if self._result.get("failed"):
            return self._result
        conn = Connection(self._connection.socket_path)
        conn_request = FortiOSRequest(
            connection=conn, task_vars=task_vars
        )
        if self._task.args["state"] == "gathered":
            if self._task.args.get("config"):
                self._result["gathered"] = self.search_for_resource_by_unique_key(
                    conn_request, self._task.args["config"], task_vars
                )
            else:
                self._result["gathered"] = conn_request.get(self.api_object)
        elif (
            self._task.args["state"] == "merged"
            or self._task.args["state"] == "replaced"
        ):
            if self._task.args.get("config"):
                self._result[self.module_return], self._result[
                    "changed"
                ] = self.configure_module_api(
                    conn_request, self._task.args["config"], task_vars
                )
        elif self._task.args["state"] == "deleted":
            if self._task.args.get("config"):
                self._result[self.module_return], self._result[
                    "changed"
                ] = self.delete_module_api_config(
                    conn_request, self._task.args["config"], task_vars
                )

        return self._result
